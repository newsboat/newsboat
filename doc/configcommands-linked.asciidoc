'''
[[always-display-description]]
****
*Syntax:* <<always-display-description,always-display-description>> [yes/no] +
*Default:* no +
*Example:* always-display-description yes +
****

If set to `yes`, then the description will always be displayed even if e.g. a `<content:encoded>` tag has been found. +



'''
[[always-download]]
****
*Syntax:* <<always-download,always-download>> <url> [<url>...] +
*Default:* n/a +
*Example:* always-download "http://www.n-tv.de/23.rss" +
****

Specifies one or more feed URLs that should always be downloaded, regardless of their Last-Modified timestamp and ETag header. This option can be specified multiple times. +



'''
[[article-sort-order]]
****
*Syntax:* <<article-sort-order,article-sort-order>> <sortfield>[-<direction>] +
*Default:* date +
*Example:* article-sort-order author-desc +
****

The <sortfield> specifies which article property shall be used for sorting, currently available are: `date`, `title`, `flags`, `author`, `link`, `guid` and `random`. The optional <direction> specifies the sort direction. `asc` specifies ascending sorting, `desc` specifies descending sorting. Note that direction does not affect `random` sort order. For `date`, `desc` is default, for all others, `asc` is default. +



'''
[[articlelist-format]]
****
*Syntax:* <<articlelist-format,articlelist-format>> <format> +
*Default:* "%4i %f %D %6L  %?T?|%-17T|  ?%t" +
*Example:* articlelist-format "%4i %f %D   %?T?|%-17T|  ?%t" +
****

This variable defines the format of entries in the article list. See the respective section in the documentation for more information on format strings. +



'''
[[articlelist-title-format]]
****
*Syntax:* <<articlelist-title-format,articlelist-title-format>> <format> +
*Default:* "%N %V - Articles in feed '%T' (%u unread, %t total) - %U" +
*Example:* articlelist-title-format "Articles in feed '%T' (%u unread)" +
****

Format of the title in article list. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[auto-reload]]
****
*Syntax:* <<auto-reload,auto-reload>> [yes/no] +
*Default:* no +
*Example:* auto-reload yes +
****

If set to `yes`, all feeds will be automatically reloaded at start up and then continuously after a certain time has passed (see `reload-time`). +



'''
[[bind-key]]
****
*Syntax:* <<bind-key,bind-key>> <key> <operation> [<dialog>] +
*Default:* n/a +
*Example:* bind-key ^R reload-all +
****

Bind key <key> to <operation>. This means that whenever <key> is pressed, then <operation> is executed (if applicable in the current dialog). A list of available operations can be found below. Optionally, you can specify a dialog. If you specify one, the key binding will only be added to the specified dialog. Available dialogs are `all` (default if none is specified), `feedlist`, `filebrowser`, `help`, `articlelist`, `article`, `tagselection`, `filterselection`, `urlview`, `podboat`, and `dirbrowser`. +



'''
[[bookmark-autopilot]]
****
*Syntax:* <<bookmark-autopilot,bookmark-autopilot>> [yes/no] +
*Default:* no +
*Example:* bookmark-autopilot yes +
****

If set to `yes`, the configured bookmark command is executed without any further input asked from user, unless the url or the title cannot be found/guessed. +



'''
[[bookmark-cmd]]
****
*Syntax:* <<bookmark-cmd,bookmark-cmd>> <command> +
*Default:* n/a +
*Example:* bookmark-cmd "~/bin/delicious-bookmark.sh" +
****

If set, then <command> will be used as bookmarking plugin. See the documentation on bookmarking for further information. +



'''
[[bookmark-interactive]]
****
*Syntax:* <<bookmark-interactive,bookmark-interactive>> [yes/no] +
*Default:* no +
*Example:* bookmark-interactive yes +
****

If set to `yes`, then the configured bookmark command is an interactive program. +



'''
[[browser]]
****
*Syntax:* <<browser,browser>> <command> +
*Default:* %BROWSER, otherwise lynx +
*Example:* browser "w3m %u" +
****

Set the browser command to use when opening an article in the browser. If BROWSER environment variable is set, it will be used as the default browser, otherwise lynx will be used. Any occurrences of `%u` in <command> will be replaced by a URL in single quotes. +



'''
[[cache-file]]
****
*Syntax:* <<cache-file,cache-file>> <path> +
*Default:* "~/.newsboat/cache.db" +
*Example:* cache-file "/tmp/testcache.db" +
****

This configuration option sets the cache file. This is especially useful if the filesystem of your home directory doesn't support proper locking (e.g. NFS). +



'''
[[cleanup-on-quit]]
****
*Syntax:* <<cleanup-on-quit,cleanup-on-quit>> [yes/no] +
*Default:* yes +
*Example:* cleanup-on-quit no +
****

If set to `yes`, then the cache gets locked and superfluous feeds and items are removed, such as feeds that can't be found in the urls configuration file anymore. +



'''
[[color]]
****
*Syntax:* <<color,color>> <element> <fgcolor> <bgcolor> [<attribute> ...] +
*Default:* n/a +
*Example:* color background white black +
****

Set the foreground color, background color and optional attributes for a certain element. +



'''
[[confirm-exit]]
****
*Syntax:* <<confirm-exit,confirm-exit>> [yes/no] +
*Default:* no +
*Example:* confirm-exit yes +
****

If set to `yes`, then newsboat will ask for confirmation whether the user really wants to quit newsboat. +



'''
[[cookie-cache]]
****
*Syntax:* <<cookie-cache,cookie-cache>> <path> +
*Default:* n/a +
*Example:* cookie-cache "~/.newsboat/cookies.txt" +
****

Set a cookie cache. If set, cookies will be cached in (i.e. read from and written to) this file, using http://www.cookiecentral.com/faq/#3.5[Netscape format]. +



'''
[[datetime-format]]
****
*Syntax:* <<datetime-format,datetime-format>> <date/time format> +
*Default:* %b %d +
*Example:* datetime-format "%D, %R" +
****

This format specifies the date/time format in the article list. For a detailed documentation on the allowed formats, consult the manpage of strftime(3). +



'''
[[define-filter]]
****
*Syntax:* <<define-filter,define-filter>> <name> <filterexpr> +
*Default:* n/a +
*Example:* define-filter "all feeds with 'fun' tag" "tags # \"fun\"" +
****

With this command, you can predefine filters, which you can later select from a list, and which are then applied after selection. This is especially useful for filters that you need often and you don't want to enter them every time you need them. +



'''
[[delete-read-articles-on-quit]]
****
*Syntax:* <<delete-read-articles-on-quit,delete-read-articles-on-quit>> [yes/no] +
*Default:* no +
*Example:* delete-read-articles-on-quit yes +
****

If set to `yes`, then all read articles will be deleted when you quit newsboat. +



'''
[[dialogs-title-format]]
****
*Syntax:* <<dialogs-title-format,dialogs-title-format>> <format> +
*Default:* "%N %V - Dialogs" +
*Example:* dialogs-title-format "%N %V - Dialogs" +
****

Format of the title in dialog list. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[dirbrowser-title-format]]
****
*Syntax:* <<dirbrowser-title-format,dirbrowser-title-format>> <format> +
*Default:* "%N %V - %?O?Open Directory&Save File? - %f" +
*Example:* dirbrowser-file-format "%?O?Open Directory&Save File? - %f" +
****

Format of the title in directory browser. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[display-article-progress]]
****
*Syntax:* <<display-article-progress,display-article-progress>> [yes/no] +
*Default:* yes +
*Example:* display-article-progress no +
****

If set to `yes`, then a read progress (in percent) is displayed in the article view. Otherwise, no read progress is displayed. +



'''
[[download-full-page]]
****
*Syntax:* <<download-full-page,download-full-page>> [yes/no] +
*Default:* no +
*Example:* download-full-page yes +
****

If set to `yes`, then for all feed items with no content but with a link, the link is downloaded and the result used as content instead. This may significantly increase the download times of "empty" feeds. +



'''
[[download-retries]]
****
*Syntax:* <<download-retries,download-retries>> <number> +
*Default:* 1 +
*Example:* download-retries 4 +
****

How many times newsboat shall try to successfully download a feed before giving up. This is an option to improve the success of downloads on slow and shaky connections such as via a TOR proxy. +



'''
[[download-timeout]]
****
*Syntax:* <<download-timeout,download-timeout>> <number> +
*Default:* 30 +
*Example:* download-timeout 60 +
****

The number of seconds newsboat shall wait when downloading a feed before giving up. This is an option to improve the success of downloads on slow and shaky connections such as via a TOR proxy. +



'''
[[error-log]]
****
*Syntax:* <<error-log,error-log>> <path> +
*Default:* n/a +
*Example:* error-log "~/.newsboat/error.log" +
****

If set, then user errors (e.g. errors regarding defunct RSS feeds) will be logged to this file. +



'''
[[external-url-viewer]]
****
*Syntax:* <<external-url-viewer,external-url-viewer>> <command> +
*Default:* n/a +
*Example:* external-url-viewer "urlview" +
****

If set, then `show-urls` will pipe the current article to a specific external tool instead of using the internal URL viewer. This can be used to integrate tools such as urlview. +



'''
[[feed-sort-order]]
****
*Syntax:* <<feed-sort-order,feed-sort-order>> <sortorder>[-<direction>] +
*Default:* none +
*Example:* feed-sort-order firsttag +
****

The <sortfield> specifies which feed property shall be used for sorting; currently available are: `firsttag`, `title`, `articlecount`, `unreadarticlecount`, `lastupdated` and `none`. The optional <direction> specifies the sort direction. `asc` specifies ascending sorting, `desc` specifies descending sorting. `desc` is the default. +



'''
[[feedhq-flag-share]]
****
*Syntax:* <<feedhq-flag-share,feedhq-flag-share>> <flag> +
*Default:* n/a +
*Example:* feedhq-flag-share "a" +
****

If set and FeedHQ support is used, then all articles that are flagged with the specified flag are being "shared" in FeedHQ so that people that follow you can see it. +



'''
[[feedhq-flag-star]]
****
*Syntax:* <<feedhq-flag-star,feedhq-flag-star>> <flag> +
*Default:* n/a +
*Example:* feedhq-flag-star "b" +
****

If set and FeedHQ support is used, then all articles that are flagged with the specified flag are being "starred" in FeedHQ and appear in the list of "Starred items". +



'''
[[feedhq-login]]
****
*Syntax:* <<feedhq-login,feedhq-login>> <login> +
*Default:* n/a +
*Example:* feedhq-login "your-login" +
****

This variable sets your FeedHQ login for FeedHQ support. +



'''
[[feedhq-min-items]]
****
*Syntax:* <<feedhq-min-items,feedhq-min-items>> <number> +
*Default:* 20 +
*Example:* feedhq-min-items 100 +
****

This variable sets the number of articles that are loaded from FeedHQ per feed. +



'''
[[feedhq-password]]
****
*Syntax:* <<feedhq-password,feedhq-password>> <password> +
*Default:* n/a +
*Example:* feedhq-password "here_goesAquote:\"" +
****

This variable sets your FeedHQ password for FeedHQ support. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[feedhq-passwordfile]]
****
*Syntax:* <<feedhq-passwordfile,feedhq-passwordfile>> <path> +
*Default:* n/a +
*Example:* feedhq-passwordfile "~/.newsboat/feedhq-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[feedhq-passwordeval]]
****
*Syntax:* <<feedhq-passwordeval,feedhq-passwordeval>> <command> +
*Default:* n/a +
*Example:* feedhq-passwordeval "gpg --decrypt ~/.newsboat/feedhq-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[feedhq-show-special-feeds]]
****
*Syntax:* <<feedhq-show-special-feeds,feedhq-show-special-feeds>> [yes/no] +
*Default:* yes +
*Example:* feedhq-show-special-feeds "no" +
****

If set and FeedHQ support is used, then "special feeds" like "People you follow" (articles shared by people you follow), "Starred items" (your starred articles) and "Shared items" (your shared articles) appear in your subscription list. +



'''
[[feedhq-url]]
****
*Syntax:* <<feedhq-url,feedhq-url>> <url> +
*Default:* "https://feedhq.org/" +
*Example:* feedhq-url "https://feedhq.example.com/" +
****

Configures the URL where your FeedHQ instance resides. +



'''
[[feedlist-format]]
****
*Syntax:* <<feedlist-format,feedlist-format>> <format> +
*Default:* "%4i %n %11u %t" +
*Example:* feedlist-format " %n %4i - %11u -%> %t" +
****

This variable defines the format of entries in the feed list. See the respective section in the documentation for more information on format strings. +



'''
[[feedlist-title-format]]
****
*Syntax:* <<feedlist-title-format,feedlist-title-format>> <format> +
*Default:* "%N %V - Your feeds (%u unread, %t total)%?T? - tag `%T'&?" +
*Example:* feedlist-title-format "Feeds (%u unread, %t total)" +
****

Format of the title in feed list. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[filebrowser-title-format]]
****
*Syntax:* <<filebrowser-title-format,filebrowser-title-format>> <format> +
*Default:* "%N %V - %?O?Open File&Save File? - %f" +
*Example:* filebrowser-title-format "%?O?Open File&Save File? - %f" +
****

Format of the title in file browser. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[goto-first-unread]]
****
*Syntax:* <<goto-first-unread,goto-first-unread>> [yes/no] +
*Default:* yes +
*Example:* goto-first-unread no +
****

If set to `yes`, then the first unread article will be selected whenever a feed is entered. +



'''
[[goto-next-feed]]
****
*Syntax:* <<goto-next-feed,goto-next-feed>> [yes/no] +
*Default:* yes +
*Example:* goto-next-feed no +
****

If set to `yes`, then the next-unread, prev-unread and random-unread keys will search in other feeds for unread articles if all articles in the current feed are read. If set to `no`, then these keys will stop in the current feed. +



'''
[[help-title-format]]
****
*Syntax:* <<help-title-format,help-title-format>> <format> +
*Default:* "%N %V - Help" +
*Example:* help-title-format "%N %V - Help" +
****

Format of the title in help window. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[highlight]]
****
*Syntax:* <<highlight,highlight>> <target> <regex> <fgcolor> [<bgcolor> [<attribute> ...]] +
*Default:* n/a +
*Example:* highlight all "newsboat" red +
****

With this command, you can highlight text parts in the feed list, the article list and the article view. For a detailed documentation, see the chapter on highlighting. +



'''
[[highlight-article]]
****
*Syntax:* <<highlight-article,highlight-article>> <filterexpr> <fgcolor> <bgcolor> [<attribute> ...] +
*Default:* n/a +
*Example:* highlight-article "author =~ \"Andreas Krennmair\"" white red bold +
****

With this command, you can highlight articles in the article list if they match a filter expression. For a detailed documentation, see the chapter on highlighting. +



'''
[[history-limit]]
****
*Syntax:* <<history-limit,history-limit>> <number> +
*Default:* 100 +
*Example:* history-limit 0 +
****

Defines the maximum number of entries of commandline resp. search history to be saved. To disable history saving, set it to 0. +



'''
[[html-renderer]]
****
*Syntax:* <<html-renderer,html-renderer>> <command> +
*Default:* internal +
*Example:* html-renderer "w3m -dump -T text/html" +
****

If set to `internal`, then the internal HTML renderer will be used. Otherwise, the specified command will be executed, the HTML to be rendered will be written to the command's stdin, and the program's output will be displayed. This makes it possible to use other, external programs, such as w3m, links or lynx, to render HTML. +



'''
[[http-auth-method]]
****
*Syntax:* <<http-auth-method,http-auth-method>> <method> +
*Default:* any +
*Example:* http-auth-method digest +
****

Set HTTP authentication method. Allowed values: `any`, `basic`, `digest`, `digest_ie` (only available with libcurl 7.19.3 and newer), `gssnegotiate`, `ntlm` and `anysafe`. +



'''
[[ignore-article]]
****
*Syntax:* <<ignore-article,ignore-article>> <feed> <filterexpr> +
*Default:* n/a +
*Example:* ignore-article "*" "title =~ \"Windows\"" +
****

If a downloaded article from <feed> matches <filterexpr>, then it is ignored and not presented to the user. This command is further explained in the "kill file" section below. +



'''
[[ignore-mode]]
****
*Syntax:* <<ignore-mode,ignore-mode>> [download/display] +
*Default:* download +
*Example:* ignore-mode "display" +
****

This configuration option defines in what way an article is ignored (see `ignore-article`). If set to `download`, then it is ignored in the download/parsing phase and thus never written to the cache, if it set to `display`, it is ignored when displaying articles but is kept in the cache. +



'''
[[include]]
****
*Syntax:* <<include,include>> <path> +
*Default:* n/a +
*Example:* include "~/.newsboat/colors" +
****

With this command, you can include other files to be interpreted as configuration files. This is especially useful to separate your configuration into several files, e.g. key configuration, color configuration, ... +



'''
[[itemview-title-format]]
****
*Syntax:* <<itemview-title-format,itemview-title-format>> <format> +
*Default:* "%N %V - Article '%T' (%u unread, %t total)" +
*Example:* itemview-title-format "Article '%T'" +
****

Format of the title in article view. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[inoreader-flag-share]]
****
*Syntax:* <<inoreader-flag-share,inoreader-flag-share>> <flag> +
*Default:* n/a +
*Example:* inoreader-flag-share "a" +
****

If set and Inoreader support is used, then all articles that are flagged with the specified flag are being "shared" in Inoreader so that people that follow you can see it. +



'''
[[inoreader-flag-star]]
****
*Syntax:* <<inoreader-flag-star,inoreader-flag-star>> <flag> +
*Default:* n/a +
*Example:* inoreader-flag-star "b" +
****

If set and Inoreader support is used, then all articles that are flagged with the specified flag are being "starred" in Inoreader and appear in the list of "Starred items". +



'''
[[inoreader-login]]
****
*Syntax:* <<inoreader-login,inoreader-login>> <login> +
*Default:* n/a +
*Example:* inoreader-login "your-login" +
****

This variable sets your Inoreader login for Inoreader support. +



'''
[[inoreader-min-items]]
****
*Syntax:* <<inoreader-min-items,inoreader-min-items>> <number> +
*Default:* 20 +
*Example:* inoreader-min-items 100 +
****

This variable sets the number of articles that are loaded from Inoreader per feed. +



'''
[[inoreader-password]]
****
*Syntax:* <<inoreader-password,inoreader-password>> <password> +
*Default:* n/a +
*Example:* inoreader-password "here_goesAquote:\"" +
****

This variable sets your Inoreader password for Inoreader support. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[inoreader-passwordfile]]
****
*Syntax:* <<inoreader-passwordfile,inoreader-passwordfile>> <path> +
*Default:* n/a +
*Example:* inoreader-passwordfile "~/.newsboat/inoreader-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[inoreader-passwordeval]]
****
*Syntax:* <<inoreader-passwordeval,inoreader-passwordeval>> <command> +
*Default:* n/a +
*Example:* inoreader-passwordeval "gpg --decrypt ~/.newsboat/inoreader-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[inoreader-show-special-feeds]]
****
*Syntax:* <<inoreader-show-special-feeds,inoreader-show-special-feeds>> [yes/no] +
*Default:* yes +
*Example:* inoreader-show-special-feeds "no" +
****

If set and Inoreader support is used, then "special feeds" like "Starred items" (your starred articles) and "Shared items" (your shared articles) appear in your subscription list. +



'''
[[keep-articles-days]]
****
*Syntax:* <<keep-articles-days,keep-articles-days>> <number> +
*Default:* 0 +
*Example:* keep-articles-days 30 +
****

If set to a number greater than 0, only articles that were published within the last <number> days are kept, and older articles are deleted. If set to 0, this option is not active. Note that changing this setting won't bring back the articles that were deleted earlier; currently, there's no non-hacky way to bring back deleted articles. +



'''
[[macro]]
****
*Syntax:* <<macro,macro>> <macro key> <command list> +
*Default:* n/a +
*Example:* macro k open ; reload ; quit +
****

With this command, you can define a macro key and specify a list of commands that shall be executed when the macro prefix and the macro key are pressed. +



'''
[[mark-as-read-on-hover]]
****
*Syntax:* <<mark-as-read-on-hover,mark-as-read-on-hover>> [yes/no] +
*Default:* no +
*Example:* mark-as-read-on-hover yes +
****

If set to `yes`, then all articles that get selected in the article list are marked as read. +



'''
[[max-download-speed]]
****
*Syntax:* <<max-download-speed,max-download-speed>> <number> +
*Default:* 0 +
*Example:* max-download-speed 50 +
****

If set to a number greater than 0, the download speed per download is set to that limit (in KB/s). +



'''
[[max-browser-tabs]]
****
*Syntax:* <<max-browser-tabs,max-browser-tabs>> <number> +
*Default:* 10 +
*Example:* max-browser-tabs 4 +
****

Set the maximum number of articles to open in a browser when using the `open-all-unread-in-browser` or `open-all-unread-in-browser-and-mark-read` commands. +



'''
[[max-items]]
****
*Syntax:* <<max-items,max-items>> <number> +
*Default:* 0 +
*Example:* max-items 100 +
****

Set the number of articles to maximally keep per feed. If the number is set to 0, then all articles are kept. +



'''
[[newsblur-login]]
****
*Syntax:* <<newsblur-login,newsblur-login>> <login> +
*Default:* n/a +
*Example:* newsblur-login "your-login" +
****

This variable sets your NewsBlur login for NewsBlur support. +



'''
[[newsblur-min-items]]
****
*Syntax:* <<newsblur-min-items,newsblur-min-items>> <number> +
*Default:* 20 +
*Example:* newsblur-min-items 100 +
****

This variable sets the number of articles that are loaded from NewsBlur per feed. +



'''
[[newsblur-password]]
****
*Syntax:* <<newsblur-password,newsblur-password>> <password> +
*Default:* n/a +
*Example:* newsblur-password "here_goesAquote:\"" +
****

This variable sets your NewsBlur password for NewsBlur support. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[newsblur-passwordfile]]
****
*Syntax:* <<newsblur-passwordfile,newsblur-passwordfile>> <path> +
*Default:* n/a +
*Example:* newsblur-passwordfile "~/.newsboat/newsblur-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[newsblur-passwordeval]]
****
*Syntax:* <<newsblur-passwordeval,newsblur-passwordeval>> <command> +
*Default:* n/a +
*Example:* newsblur-passwordeval "gpg --decrypt ~/.newsboat/newsblur-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[newsblur-url]]
****
*Syntax:* <<newsblur-url,newsblur-url>> <url> +
*Default:* "https://newsblur.com" +
*Example:* newsblur-url "https://localhost" +
****

Configures the URL where the NewsBlur instance resides. +



'''
[[notify-always]]
****
*Syntax:* <<notify-always,notify-always>> [yes/no] +
*Default:* no +
*Example:* notify-always yes +
****

If set to `no`, notifications will only be made when there are new feeds or articles. If set to `yes`, notifications will be made regardless. +



'''
[[notify-beep]]
****
*Syntax:* <<notify-beep,notify-beep>> [yes/no] +
*Default:* no +
*Example:* notify-beep yes +
****

If set to `yes`, then the speaker will beep on new articles. +



'''
[[notify-format]]
****
*Syntax:* <<notify-format,notify-format>> <string> +
*Default:* "newsboat: finished reload, %f unread feeds (%n unread articles total)" +
*Example:* notify-format "%d new articles (%n unread articles, %f unread feeds)" +
****

Format string that is used for formatting notifications. See the chapter on format strings for more information. +



'''
[[notify-program]]
****
*Syntax:* <<notify-program,notify-program>> <command> +
*Default:* n/a +
*Example:* notify-program "~/bin/my-notifier" +
****

If set, then the configured program will be executed if new articles arrived (through a reload) or if `notify-always` is `yes`. The first parameter of the called program contains the notification message. In order to pass other hard-coded arguments to the program, write an appropriate wrapper shell script and use it as <command> instead. +



'''
[[notify-screen]]
****
*Syntax:* <<notify-screen,notify-screen>> [yes/no] +
*Default:* no +
*Example:* notify-screen yes +
****

If set to `yes`, then a "privacy message" will be sent to the terminal, containing a notification message about new articles. This is especially useful if you use terminal emulations such as GNU screen which implement privacy messages. +



'''
[[notify-xterm]]
****
*Syntax:* <<notify-xterm,notify-xterm>> [yes/no] +
*Default:* no +
*Example:* notify-xterm yes +
****

If set to `yes`, then the xterm window title will be set to a notification message about new articles. +



'''
[[ocnews-flag-star]]
****
*Syntax:* <<ocnews-flag-star,ocnews-flag-star>> <character> +
*Default:* n/a +
*Example:* ocnews-flag-star "s" +
****

If set and ownCloud News support is used, then all articles that are flagged with the specified flag are being "starred" in ownCloud News. +



'''
[[ocnews-login]]
****
*Syntax:* <<ocnews-login,ocnews-login>> <username> +
*Default:* n/a +
*Example:* ocnews-login "user" +
****

Sets the username to use with the ownCloud instance. +



'''
[[ocnews-password]]
****
*Syntax:* <<ocnews-password,ocnews-password>> <password> +
*Default:* n/a +
*Example:* ocnews-password "here_goesAquote:\"" +
****

Configures the password to use with the ownCloud instance. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[ocnews-passwordfile]]
****
*Syntax:* <<ocnews-passwordfile,ocnews-passwordfile>> <path> +
*Default:* n/a +
*Example:* ocnews-passwordfile "~/.newsboat/ocnews-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[ocnews-passwordeval]]
****
*Syntax:* <<ocnews-passwordeval,ocnews-passwordeval>> <command> +
*Default:* n/a +
*Example:* ocnews-passwordeval "gpg --decrypt ~/.newsboat/ocnews-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[ocnews-url]]
****
*Syntax:* <<ocnews-url,ocnews-url>> <url> +
*Default:* n/a +
*Example:* ocnews-url "https://localhost/owncloud" +
****

Configures the URL where the ownCloud instance resides. +



'''
[[oldreader-flag-share]]
****
*Syntax:* <<oldreader-flag-share,oldreader-flag-share>> <flag> +
*Default:* n/a +
*Example:* oldreader-flag-share "a" +
****

If set and The Old Reader support is used, then all articles that are flagged with the specified flag are being "shared" in The Old Reader so that people that follow you can see it. +



'''
[[oldreader-flag-star]]
****
*Syntax:* <<oldreader-flag-star,oldreader-flag-star>> <flag> +
*Default:* n/a +
*Example:* oldreader-flag-star "b" +
****

If set and The Old Reader support is used, then all articles that are flagged with the specified flag are being "starred" in The Old Reader and appear in the list of "Starred items". +



'''
[[oldreader-login]]
****
*Syntax:* <<oldreader-login,oldreader-login>> <login> +
*Default:* n/a +
*Example:* oldreader-login "your-login" +
****

This variable sets your The Old Reader login for The Older Reader support. +



'''
[[oldreader-min-items]]
****
*Syntax:* <<oldreader-min-items,oldreader-min-items>> <number> +
*Default:* 20 +
*Example:* oldreader-min-items 100 +
****

This variable sets the number of articles that are loaded from The Old Reader per feed. +



'''
[[oldreader-password]]
****
*Syntax:* <<oldreader-password,oldreader-password>> <password> +
*Default:* n/a +
*Example:* oldreader-password "here_goesAquote:\"" +
****

This variable sets your The Old Reader password for The Old Reader support. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[oldreader-passwordfile]]
****
*Syntax:* <<oldreader-passwordfile,oldreader-passwordfile>> <path> +
*Default:* n/a +
*Example:* oldreader-passwordfile "~/.newsboat/oldreader-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[oldreader-passwordeval]]
****
*Syntax:* <<oldreader-passwordeval,oldreader-passwordeval>> <command> +
*Default:* n/a +
*Example:* oldreader-passwordeval "gpg --decrypt ~/.newsboat/oldreader-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[oldreader-show-special-feeds]]
****
*Syntax:* <<oldreader-show-special-feeds,oldreader-show-special-feeds>> [yes/no] +
*Default:* yes +
*Example:* oldreader-show-special-feeds "no" +
****

If set and The Old reader support is used, then "special feeds" like "People you follow" (articles shared by people you follow), "Starred items" (your starred articles) and "Shared items" (your shared articles) appear in your subscription list. +



'''
[[openbrowser-and-mark-jumps-to-next-unread]]
****
*Syntax:* <<openbrowser-and-mark-jumps-to-next-unread,openbrowser-and-mark-jumps-to-next-unread>> [yes/no] +
*Default:* no +
*Example:* openbrowser-and-mark-jumps-to-next-unread yes +
****

If set to `yes`, jump to the next unread item when an item is opened in the browser and marked as read. +



'''
[[opml-url]]
****
*Syntax:* <<opml-url,opml-url>> <url> ... +
*Default:* n/a +
*Example:* opml-url "http://host.domain.tld/blogroll.opml" "http://example.com/anotheropmlfile.opml" +
****

If the OPML online subscription mode is enabled, then the list of feeds will be taken from the OPML file found on this location. Optionally, you can specify more than one URL. All the listed OPML URLs will then be taken into account when loading the feed list. +



'''
[[pager]]
****
*Syntax:* <<pager,pager>> [<command>/internal] +
*Default:* internal +
*Example:* pager "less %f" +
****

If set to `internal`, then the internal pager will be used. Otherwise, the article to be displayed will be rendered to be a temporary file and then displayed with the configured pager. If the command is set to an empty string, the content of the "PAGER" environment variable will be used. If the command contains a placeholder `%f`, it will be replaced with the temporary filename. +



'''
[[podcast-auto-enqueue]]
****
*Syntax:* <<podcast-auto-enqueue,podcast-auto-enqueue>> [yes/no] +
*Default:* no +
*Example:* podcast-auto-enqueue yes +
****

If set to `yes`, then all podcast URLs that are found in articles are added to the podcast download queue. See the respective section in the documentation for more information on podcast support in newsboat. +



'''
[[prepopulate-query-feeds]]
****
*Syntax:* <<prepopulate-query-feeds,prepopulate-query-feeds>> [yes/no] +
*Default:* no +
*Example:* prepopulate-query-feeds yes +
****

If set to `yes`, then all query feeds are prepopulated with articles on startup. +



'''
[[ssl-verifyhost]]
****
*Syntax:* <<ssl-verifyhost,ssl-verifyhost>> [yes/no] +
*Default:* yes +
*Example:* ssl-verifyhost no +
****

If set to `no`, skip verification of the certificate's name against host. +



'''
[[ssl-verifypeer]]
****
*Syntax:* <<ssl-verifypeer,ssl-verifypeer>> [yes/no] +
*Default:* yes +
*Example:* ssl-verifypeer no +
****

If set to `no`, skip verification of the peer's SSL certificate. +



'''
[[proxy-auth-method]]
****
*Syntax:* <<proxy-auth-method,proxy-auth-method>> <method> +
*Default:* any +
*Example:* proxy-auth-method ntlm +
****

Set proxy authentication method. Allowed values: `any`, `basic`, `digest`, `digest_ie` (only available with libcurl 7.19.3 and newer), `gssnegotiate`, `ntlm` and `anysafe`. +



'''
[[proxy-auth]]
****
*Syntax:* <<proxy-auth,proxy-auth>> <auth> +
*Default:* n/a +
*Example:* proxy-auth user:password +
****

Set the proxy authentication string. +



'''
[[proxy-type]]
****
*Syntax:* <<proxy-type,proxy-type>> <type> +
*Default:* http +
*Example:* proxy-type socks5 +
****

Set proxy type. Allowed values: `http`, `socks4`, `socks4a`, `socks5` and `socks5h`. +



'''
[[proxy]]
****
*Syntax:* <<proxy,proxy>> <server:port> +
*Default:* n/a +
*Example:* proxy localhost:3128 +
****

Set the proxy to use for downloading RSS feeds. (Don't forget to actually enable the proxy with `use-proxy yes`.) +



'''
[[refresh-on-startup]]
****
*Syntax:* <<refresh-on-startup,refresh-on-startup>> [yes/no] +
*Default:* no +
*Example:* refresh-on-startup yes +
****

If set to `yes`, then all feeds will be reloaded when newsboat starts up. This is equivalent to the `-r` commandline option. +



'''
[[reload-only-visible-feeds]]
****
*Syntax:* <<reload-only-visible-feeds,reload-only-visible-feeds>> [yes/no] +
*Default:* no +
*Example:* reload-only-visible-feeds yes +
****

If set to `yes`, then manually reloading all feeds will only reload the currently visible feeds, e.g. if a filter or a tag is set. +



'''
[[reload-threads]]
****
*Syntax:* <<reload-threads,reload-threads>> <number> +
*Default:* 1 +
*Example:* reload-threads 3 +
****

The number of parallel reload threads that shall be started when all feeds are reloaded. +



'''
[[reload-time]]
****
*Syntax:* <<reload-time,reload-time>> <number> +
*Default:* 60 +
*Example:* reload-time 120 +
****

The number of minutes between automatic reloads. +



'''
[[reset-unread-on-update]]
****
*Syntax:* <<reset-unread-on-update,reset-unread-on-update>> <url> [<url>...] +
*Default:* n/a +
*Example:* reset-unread-on-update "http://blog.fefe.de/rss.xml?html" +
****

Specifies one or more feed URLs for whose articles the unread flag will be reset if an article has been updated, i.e. its content has been changed. This is especially useful for RSS feeds where single articles are updated after publication, and you want to be notified of the updates. This option can be specified multiple times. +



'''
[[save-path]]
****
*Syntax:* <<save-path,save-path>> <path-to-directory> +
*Default:* ~/ +
*Example:* save-path "~/Saved Articles" +
****

The default path where articles shall be saved to. If an invalid path is specified, the current directory is used. +



'''
[[search-highlight-colors]]
****
*Syntax:* <<search-highlight-colors,search-highlight-colors>> <fgcolor> <bgcolor> [<attribute> ...] +
*Default:* black yellow bold +
*Example:* search-highlight-colors white black bold +
****

This configuration command specifies the highlighting colors when searching for text from the article view. +



'''
[[searchresult-title-format]]
****
*Syntax:* <<searchresult-title-format,searchresult-title-format>> <format> +
*Default:* "%N %V - Search result (%u unread, %t total)" +
*Example:* searchresult-title-format "Search result" +
****

Format of the title in search result. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[selectfilter-title-format]]
****
*Syntax:* <<selectfilter-title-format,selectfilter-title-format>> <format> +
*Default:* "%N %V - Select Filter" +
*Example:* selectfilter-title-format "Select Filter" +
****

Format of the title in filter selection dialog. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[selecttag-format]]
****
*Syntax:* <<selecttag-format,selecttag-format>> <format> +
*Default:* "%4i  %T (%u)" +
*Example:* selecttag-format "[%2i] %T (%n unread articles in %f feeds, %u feeds total)" +
****

Format of the lines in "Select tag" dialog. See the respective section in the documentation for more information on format strings. +



'''
[[selecttag-title-format]]
****
*Syntax:* <<selecttag-title-format,selecttag-title-format>> <format> +
*Default:* "%N %V - Select Tag" +
*Example:* selecttag-title-format "Select Tag" +
****

Format of the title in tag selection dialog. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[show-keymap-hint]]
****
*Syntax:* <<show-keymap-hint,show-keymap-hint>> [yes/no] +
*Default:* yes +
*Example:* show-keymap-hint no +
****

If set to `no`, then the keymap hints on the bottom of screen will not be displayed. +



'''
[[show-title-bar]]
****
*Syntax:* <<show-title-bar,show-title-bar>> [yes/no] +
*Default:* yes +
*Example:* show-title-bar no +
****

If set to `no`, then the title bar on the top of the screen will not be displayed. +



'''
[[show-read-articles]]
****
*Syntax:* <<show-read-articles,show-read-articles>> [yes/no] +
*Default:* yes +
*Example:* show-read-articles no +
****

If set to `yes`, then all articles of a feed are listed in the article list. If set to `no`, then only unread articles are listed. +



'''
[[show-read-feeds]]
****
*Syntax:* <<show-read-feeds,show-read-feeds>> [yes/no] +
*Default:* yes +
*Example:* show-read-feeds no +
****

If set to `yes`, then all feeds, including those without unread articles, are listed. If set to `no`, then only feeds with one or more unread articles are list. +



'''
[[suppress-first-reload]]
****
*Syntax:* <<suppress-first-reload,suppress-first-reload>> [yes/no] +
*Default:* no +
*Example:* suppress-first-reload yes +
****

If set to `yes`, then the first automatic reload will be suppressed if `auto-reload` is set to `yes`. +



'''
[[swap-title-and-hints]]
****
*Syntax:* <<swap-title-and-hints,swap-title-and-hints>> [yes/no] +
*Default:* no +
*Example:* swap-title-and-hints yes +
****

If set to `yes`, then the title at the top of screen and keymap hints at the bottom of screen will be swapped. +



'''
[[text-width]]
****
*Syntax:* <<text-width,text-width>> <number> +
*Default:* 0 +
*Example:* text-width 72 +
****

If set to a number greater than 0, all HTML will be rendered to this maximum line length or the terminal width (whichever is smaller). If set to 0, the terminal width will always be used. Does not apply when using external renderer or viewing the source. Also note that "Link" header and "Links" section won't be affected by it—they contain URLs which are better not wrapped. +



'''
[[toggleitemread-jumps-to-next-unread]]
****
*Syntax:* <<toggleitemread-jumps-to-next-unread,toggleitemread-jumps-to-next-unread>> [yes/no] +
*Default:* no +
*Example:* toggleitemread-jumps-to-next-unread yes +
****

If set to `yes`, jump to the next unread item when an item's read status is toggled in the article list. +



'''
[[ttrss-flag-publish]]
****
*Syntax:* <<ttrss-flag-publish,ttrss-flag-publish>> <character> +
*Default:* n/a +
*Example:* ttrss-flag-publish "b" +
****

If set and Tiny Tiny RSS support is used, then all articles that are flagged with the specified flag are being marked as "published" in Tiny Tiny RSS. +



'''
[[ttrss-flag-star]]
****
*Syntax:* <<ttrss-flag-star,ttrss-flag-star>> <character> +
*Default:* n/a +
*Example:* ttrss-flag-star "a" +
****

If set and Tiny Tiny RSS support is used, then all articles that are flagged with the specified flag are being "starred" in Tiny Tiny RSS. +



'''
[[ttrss-login]]
****
*Syntax:* <<ttrss-login,ttrss-login>> <username> +
*Default:* n/a +
*Example:* ttrss-login "admin" +
****

Sets the username for use with Tiny Tiny RSS. +



'''
[[ttrss-mode]]
****
*Syntax:* <<ttrss-mode,ttrss-mode>> [multi/single] +
*Default:* multi +
*Example:* ttrss-mode "single" +
****

Configures the mode in which Tiny Tiny RSS is used. In single-user mode, login and password are used for HTTP authentication, while in multi-user mode, they are used for authenticating with Tiny Tiny RSS. +



'''
[[ttrss-password]]
****
*Syntax:* <<ttrss-password,ttrss-password>> <password> +
*Default:* n/a +
*Example:* ttrss-password "here_goesAquote:\"" +
****

Configures the password for use with Tiny Tiny RSS. Double quotes should be escaped, i.e. you should write `{backslash}"` instead of `"`. +



'''
[[ttrss-passwordfile]]
****
*Syntax:* <<ttrss-passwordfile,ttrss-passwordfile>> <path> +
*Default:* n/a +
*Example:* ttrss-passwordfile "~/.newsboat/ttrss-pw.txt" +
****

A more secure alternative to the above, by storing your password elsewhere in your system. +



'''
[[ttrss-passwordeval]]
****
*Syntax:* <<ttrss-passwordeval,ttrss-passwordeval>> <command> +
*Default:* n/a +
*Example:* ttrss-passwordeval "gpg --decrypt ~/.newsboat/ttrss-password.gpg" +
****

Another secure alternative, is providing your password from an external command that is evaluated during login. This can be used to read your password from a gpg encrypted file or your system keyring. +



'''
[[ttrss-url]]
****
*Syntax:* <<ttrss-url,ttrss-url>> <url> +
*Default:* n/a +
*Example:* ttrss-url "http://example.com/ttrss/" +
****

Configures the URL where the Tiny Tiny RSS installation you want to use resides. +



'''
[[unbind-key]]
****
*Syntax:* <<unbind-key,unbind-key>> <key> [<dialog>] +
*Default:* n/a +
*Example:* unbind-key R +
****

Unbind key <key>. This means that no operation is called when <key> is pressed. If you provide "-a" as <key>, all currently bound keys will become unbound. Optionally, you can specify a dialog (for a list of available dialogs, see `bind-key` above). If you specify one, the key binding will only be unbound for the specified dialog. +



'''
[[urls-source]]
****
*Syntax:* <<urls-source,urls-source>> <source> +
*Default:* "local" +
*Example:* urls-source "oldreader" +
****

This configuration command sets the source where URLs shall be retrieved from. By default, this is ~/.newsboat/urls. Alternatively, you can set it to `opml`, which enables newsboat's OPML online subscription mode, to `ttrss` which enables newsboat's Tiny Tiny RSS support, to `oldreader`, which enables newsboat's The Old Reader support, to `newsblur`, which enables NewsBlur support, or `feedhq` for FeedHQ support, or `ocnews` for ownCloud News support, or `inoreader` for Inoreader support. Query feed specifications will be read from the local urls file regardless of this setting. +



'''
[[urlview-title-format]]
****
*Syntax:* <<urlview-title-format,urlview-title-format>> <format> +
*Default:* "%N %V - URLs" +
*Example:* urlview-title-format "URLs" +
****

Format of the title in URL view. See "Format Strings" section of Newsboat manual for details on available formats. +



'''
[[use-proxy]]
****
*Syntax:* <<use-proxy,use-proxy>> [yes/no] +
*Default:* no +
*Example:* use-proxy yes +
****

If set to `yes`, then the configured proxy will be used for downloading the RSS feeds. +



'''
[[user-agent]]
****
*Syntax:* <<user-agent,user-agent>> <string> +
*Default:* n/a +
*Example:* user-agent "Lynx/2.8.5rel.1 libwww-FM/2.14" +
****

If set to a non-zero-length string, this value will be used as HTTP User-Agent header for all HTTP requests. +



