language: rust

rust: stable

addons:
  apt:
    packages: &global_deps
    - libsqlite3-dev
    - libcurl4-openssl-dev
    - libxml2-dev
    - libstfl-dev
    - libjson-c-dev
    - libncursesw5-dev
    - asciidoc
    - libxml2-utils
    - xsltproc
    - docbook-xml
    - docbook-xsl
addons:
  apt:
    packages: &clang_deps
    - *global_deps
    - g++ # required for some niceties in C++ standard library

install_coveralls_commands: &install_coveralls
  - pip install --user cpp-coveralls

newsboat_brew_commands: &osx_deps
  - brew update
  - brew install gcc || brew link --overwrite gcc
  - brew outdated "pkg-config" || brew upgrade "pkg-config"
  - brew install "gettext" && brew link --force "gettext"
  - brew outdated "sqlite" || brew upgrade "sqlite"
  - brew outdated "curl" || brew upgrade "curl"
  - brew install "libstfl"
  - brew outdated "json-c" || brew upgrade "json-c"
  - brew install "asciidoc"
  - brew install "docbook-xsl"
  - brew outdated "python" || brew upgrade "python"
  - brew install "pyenv" || brew upgrade "pyenv"
  - eval "$(pyenv init -)"
  - pip3 install cpp-coveralls
  - pyenv rehash

env:
  - CXXFLAGS='-fstack-clash-protection -D_GLIBCXX_ASSERTIONS -Wformat -Wformat-security -fstack-protector-strong --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2'

matrix:
  fast_finish: true
  include:
    - compiler: gcc
      os: osx
      rust: 1.26.0
      env:
        - COMPILER=g++
        - GCOV=/usr/bin/gcov
        # a2x will run xmllint on generated files, so we have to pass the path
        # to AsciiDoc's catalog files
        - XML_CATALOG_FILES=/usr/local/etc/xml/catalog
      before_install:
        *osx_deps
    - compiler: gcc
      os: osx
      env:
        - COMPILER=g++
        - GCOV=/usr/bin/gcov
        # a2x will run xmllint on generated files, so we have to pass the path
        # to AsciiDoc's catalog files
        - XML_CATALOG_FILES=/usr/local/etc/xml/catalog
      before_install:
        *osx_deps
    - compiler: clang
      os: osx
      env:
        - COMPILER=clang++
        - GCOV=/usr/bin/gcov
        # a2x will run xmllint on generated files, so we have to pass the path
        # to AsciiDoc's catalog files
        - XML_CATALOG_FILES=/usr/local/etc/xml/catalog
      before_install:
        *osx_deps
    - compiler: gcc-8
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-8
            - *global_deps
      env:
        - COMPILER=g++-8
        - GCOV=/usr/bin/gcov-8
      script: &release_build_script
        - CXXFLAGS="$CXXFLAGS -O3" make -j2 --keep-going all test
        - ( cd test && ./test --order rand ); ret=$?; (cargo test) && sh -c "exit $ret"
    - compiler: clang-8
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-8
            - llvm-8
            - *clang_deps
      env:
        - COMPILER=clang++-8
        - GCOV="llvm-cov-8 gcov"
      script: *release_build_script
    - compiler: gcc-4.9
      os: linux
      dist: xenial
      rust: 1.26.0
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-4.9
            - *global_deps
      env:
        - COMPILER=g++-4.9
        - GCOV=/usr/bin/gcov-4.9
      before_install:
        *install_coveralls
    - compiler: gcc-4.9
      os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-4.9
            - *global_deps
      env:
        - COMPILER=g++-4.9
        - GCOV=/usr/bin/gcov-4.9
      before_install:
        *install_coveralls
    - compiler: gcc-5
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-5
            - *global_deps
      env:
        - COMPILER=g++-5
        - GCOV=/usr/bin/gcov-5
      before_install:
        *install_coveralls
    - compiler: gcc-6
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-6
            - *global_deps
      env:
        - COMPILER=g++-6
        - GCOV=/usr/bin/gcov-6
      before_install:
        *install_coveralls
    - compiler: gcc-7
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-7
            - *global_deps
      env:
        - COMPILER=g++-7
        - GCOV=/usr/bin/gcov-7
      before_install:
        *install_coveralls
    - compiler: gcc-8
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-8
            - *global_deps
      env:
        - COMPILER=g++-8
        - GCOV=/usr/bin/gcov-8
      before_install:
        *install_coveralls
    - compiler: gcc-9
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - g++-9
            - *global_deps
      env:
        - COMPILER=g++-9
        - GCOV=/usr/bin/gcov-9
      before_install:
        *install_coveralls
    - compiler: clang
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - *clang_deps
      env:
        - COMPILER=clang++
        - GCOV="llvm-cov gcov"
      before_install:
        *install_coveralls
    - compiler: clang-4.0
      os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
            - llvm-toolchain-xenial-4.0
          packages:
            - clang-4.0
            - llvm-4.0
            - *clang_deps
      env:
        - COMPILER=clang++-4.0
        - GCOV="llvm-cov-4.0 gcov"
      before_install:
        *install_coveralls
    - compiler: clang-5.0
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-5.0
            - llvm-5.0
            - *clang_deps
      env:
        - COMPILER=clang++-5.0
        - GCOV="llvm-cov-5.0 gcov"
      before_install:
        *install_coveralls
    - compiler: clang-6.0
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-6.0
            - llvm-6.0
            - *clang_deps
      env:
        - COMPILER=clang++-6.0
        - GCOV="llvm-cov-6.0 gcov"
      before_install:
        *install_coveralls
    - compiler: clang-7
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-7
            - llvm-7
            - *clang_deps
      env:
        - COMPILER=clang++-7
        - GCOV="llvm-cov-7 gcov"
      before_install:
        *install_coveralls
    - compiler: clang-8
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-8
            - llvm-8
            - *clang_deps
      env:
        - COMPILER=clang++-8
        - GCOV="llvm-cov-8 gcov"
      before_install:
        *install_coveralls
    - compiler: clang-9
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-9
            - llvm-9
            - *clang_deps
      env:
        - COMPILER=clang++-9
        - GCOV="llvm-cov-9 gcov"
      before_install:
        *install_coveralls
    - addons:
        apt:
          packages:
            - i18nspector
      env:
        - CHECKS=i18nspector

install:
  - export CXX=$COMPILER
  - cd ${TRAVIS_BUILD_DIR}

script:
  - cd ${TRAVIS_BUILD_DIR}
  # CI builds take a while to provision, install dependencies and compile our
  # stuff. To maximize the benefits, we ask Make to process as many rules as
  # possible before failing. This enables developers to fix more errors before
  # re-submitting the code to CI, which should increase throughput.
  - if [ -z "$CHECKS" ]; then   make -j2 PROFILE=1 --keep-going all test   ; fi
  # We want to run both C++ and Rust tests, but we also want this entire
  # command to fail if some test suite fails. That's why we store the C++'s
  # exit code and chain it to Rust's in the end.
  - if [ -z "$CHECKS" ]; then   ( cd test && ./test --order rand ); ret=$?; (cargo test) && sh -c "exit $ret"   ; fi
  - if [ "$CHECKS" = "i18nspector" ]; then   make run-i18nspector | tee i18nspector.log && if `egrep '^(E|W):' i18nspector.log >/dev/null 2>&1` ; then false else true; fi   ; fi

after_success:
  - cd ${TRAVIS_BUILD_DIR}
  - if [ -z "$CHECKS" ]; then   ./submit-to-coveralls.sh   ; fi
