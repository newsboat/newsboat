freebsd_resource_settings: &freebsd_resource_settings
  cpu: 4
  memory: 8GB

task:
    skip: "changesIncludeOnly('contrib/*', 'contrib/**/*', 'doc/*', 'doc/**/*', 'docker/*', 'docker/**/*', 'po/*', 'po/**/*', 'snap/*', 'snap/**/*')"
    matrix:
        - name: FreeBSD 14.0
          freebsd_instance:
            image: freebsd-14-0-snap
            << : *freebsd_resource_settings

    cargo_cache: &cargo_cache
        # This works in conjunction with after_cache_script and
        # before_cache_script defined below.
        folder: $HOME/cargo-cache
        fingerprint_script:
          # We include the cache name in the fingerprint to avoid re-using old
          # caches that contained ~/.cargo
          - echo cargo-cache
          - cat Cargo.lock

    env:
        HOME: /home/testuser
        RUSTFLAGS: '-D warnings'

    after_cache_script: &after_cache_script
      - mkdir $HOME/.cargo || true
      - mv $HOME/cargo-cache/registry/ $HOME/cargo-cache/git/ $HOME/.cargo/ || true
    install_script:
        # Make sure we use the same package repository for all images. Snapshots
        # (like 11.3-STABLE) default to latest, while releases default to quarterly.
        - sed -i.bak -e 's,pkg+http://pkg.FreeBSD.org/\${ABI}/quarterly,pkg+http://pkg.FreeBSD.org/\${ABI}/latest,' /etc/pkg/FreeBSD.conf
        - pkg update -f
        - pkg upgrade -y
        - pkg install -y rust gmake rubygem-asciidoctor pkgconf stfl curl json-c ncurses openssl sqlite3 gettext-tools libxml2
    setup_script:
        - pw groupadd testgroup
        - pw useradd testuser -g testgroup -w none -m
        - cp -R . $HOME
        - chown -R testuser:testgroup $HOME
    # CI builds take a while to provision, install dependencies and compile our
    # stuff. To maximize the benefits, we ask Make to process as many rules as
    # possible before failing. This enables developers to fix more errors before
    # re-submitting the code to CI, which should increase throughput.
    build_script: su testuser -c 'cd ~ && gmake --jobs=5 --keep-going all test'
    test_script: su testuser -c 'cd ~ && RUST_TEST_THREADS=5 RUST_BACKTRACE=1 gmake -j5 NEWSBOAT_RUN_IGNORED_TESTS=1 ci-check'
    # This installs everything into a "fake filesystem root", then uninstalls
    # everything and checks that there are no files left over. The purpose of
    # this check is to ensure that: 1) `make install` doesn't fail; 2) `make
    # uninstall` cleans up everything that `make install` installed.
    #
    # We run this *before* Clippy because Clippy rebuilds crates in debug mode,
    # which causes some C++ classes to be re-compiled as they depend on cxx
    # bridges.
    fake_install_script: su testuser -c 'cd ~ && mkdir fakeroot && gmake DESTDIR=fakeroot install && gmake DESTDIR=fakeroot uninstall && [ $(find fakeroot -type f -print | wc -l) -eq 0 ]'
    clippy_script: su testuser -c 'cd ~ && cargo clippy --all-targets --all-features -- -D warnings -A unknown-lints'
    before_cache_script: &before_cache_script
        # Cirrus CI sometimes fails to unpack the cache. In that case, it
        # removes the "cache folder" and tries again.
        #
        # We used to use ~/.cargo as a "cache folder", but Cirrus then
        # sometimes removed ~/.cargo/bin and broke the build. To work around
        # that, we're storing the cacheble stuff in a separate directory which
        # we move in/out of ~/.cargo before/after the build.
        - mkdir -p $HOME/cargo-cache/git/
        - mv $HOME/.cargo/registry/ $HOME/cargo-cache/ || true
        - mv $HOME/.cargo/git/db/ $HOME/cargo-cache/git/ || true
